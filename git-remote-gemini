#!/usr/bin/env python3
import ssl, sqlite3, os, contextlib, atexit, sys, urllib.parse, hashlib, socket, ssl
urllib.parse.uses_relative.append("gemini")
urllib.parse.uses_netloc.append("gemini")

_HAS_ASN1CRYPTO = False
try:
	from asn1crypto import x509, pem
	_HAS_ASN1CRYPTO = True
except: pass

RETRUST_MODE = False
if os.environ.get("REMOTE_GEMINI_TRUST","0")=="1":
	RETRUST_MODE = True

# start utilities
def die(msg):
	print("fatal:",msg,file=sys.stderr)
	sys.exit(1)

def error(msg):
	print("error:","remote-gemini:",msg,file=sys.stderr)
	sys.exit(1)

tofu = sqlite3.connect(os.path.join(os.environ.get("XDG_CONFIG_HOME",os.path.join(os.environ["HOME"],".config")),"tofu.db"))
atexit.register(lambda: tofu.close())

@contextlib.contextmanager
def cursor():
	# convenience function
	# `with cursor() as cur:`
	global tofu
	with tofu:
		yield tofu.cursor()

with cursor() as cur:
	cur.execute("CREATE TABLE IF NOT EXISTS tofu (hostname text, address text, fingerprint text)")

def fingerprint_cert(cert,force_cert_print=False):
	if _HAS_ASN1CRYPTO and not force_cert_print:
		# if we have asn1crypto, fingerprint the public key and not the cert itself
		# that way, if the new cert is signed with the same public key, we won't have to worry about retrust mode
		cert = x509.Certificate.load(cert).public_key.unwrap().contents
	if type(cert)!=bytes: cert = cert.encode()
	return hashlib.sha256(cert).hexdigest()

def validate_cert(cert,hostname,address):
	"""Validates a certificate via Trust on First Use (TOFU). If validation error occurs, program will exit."""
	fingerprint = fingerprint_cert(cert)
	with cursor() as cur:
		cur.execute("SELECT fingerprint FROM tofu WHERE hostname = ? AND address = ?",(hostname,address))
		fingerprints = [x[0] for x in cur.fetchall()]
		if len(fingerprints)>0 and not RETRUST_MODE: # there are certificate fingerprints and we're not in retrust mode
			if fingerprint not in fingerprints: die("untrusted certificate, verify SHA256 hash out of band and enable trust mode if necessary: "+fingerprint_cert(cert,True))
		else: # either there are no fingerprints or we're in retrust mode, add fingerprint to trust db
			cur.execute("INSERT INTO tofu VALUES (?,?,?)",(hostname,address,fingerprint))
	# db auto-commits when you exit cursor() context

def context():
	if "_ssl_ctx" in globals():
		return globals()["_ssl_ctx"]
	else:
		_ssl_ctx = ssl.create_default_context()
		_ssl_ctx.check_hostname=False
		_ssl_ctx.verify_mode=ssl.CERT_NONE
		globals()["_ssl_ctx"]=_ssl_ctx
		return _ssl_ctx

def fetch(url,breadcrumbs=None,backoff=1,max_backoff=1024):
	if breadcrumbs is None: breadcrumbs = []
	if url in breadcrumbs: die("infinite redirect loop detected")
	if len(breadcrumbs)==5: die("too many redirects accessing gemini resource")
	breadcrumbs.append(url)
	parsed = urllib.parse.urlparse(url)
	if parsed.scheme!="gemini": error(f"cannot handle non-gemini {parsed.scheme} URL")
	with context().wrap_socket(socket.socket(),server_hostname=parsed.hostname) as s:
		s.settimeout(5)
		try:
			s.connect((parsed.hostname,parsed.port or 1965))
		except socket.timeout:
			die("timeout connecting to server")
		address = s.getpeername()[0]
		cert = s.getpeercert(binary_form=True)
		validate_cert(cert,parsed.hostname,address)
		# if we're still here, the cert verified
		s.send((url+"\r\n").encode("utf-8"))
		out = b""
		while (data:=s.recv(1024)):
			out+=data
		header, data = out.split(b"\r\n",1)
		header = header.decode("utf-8")
		parts = header.split()
		if parts[0][:1]=="2": # success
			return data
		elif parts[0][:1]=="3": # redirect
			if len(parts)==1: die("invalid gemini response")
			return fetch(parts[1],breadcrumbs)
		elif parts[0][:1]=="4": # temporary error
			if parts[0]=="44": # slow down
				time.sleep(backoff)
				if backoff==max_backoff: error("server unavailable at this time, try again later")
				breadcrumbs.pop() # remove current URL from breadcrumbs
				return fetch(url,breadcrumbs,backoff*2)
			else: error(f"server returned error status {header}")
		elif parts[0][:1]=="5": error(f"server returned error status {header}")

# end utilities

class GitRemoteGemini:
	def __init__(self,argv=sys.argv):
		"""Parses the arguments from the command line. Errors if the URL is not provided."""
		self.repository = argv[1]
		if len(argv)>2: self.url = argv[2]
		else: die("must be provided URL")
	def fetch(self,postfix,backoff=1,max_backoff=1024):
		return fetch(self.url.rstrip("/")+postfix,backoff=backoff,max_backoff=max_backoff)
	def handle(self,line):
		"""Takes in a line and returns a generator that yields the lines to send back to git."""
		parts = line.strip().split()
		if not parts: error("malformed command input from git")
		if hasattr(self,f"command_{parts[0]}"):
			return getattr(self,f"command_{parts[0]}")(*parts[1:])
		else: error(f"unknown command '{parts[0]}' from git")
	def command_capabilities(self):
		"""Returns the capabilities we provide. We only provide `fetch`, so... yeah."""
		yield 'fetch'
		yield ''
	def get_hash_algo(self,sample):
		if len(sample)==40:
			return hashlib.sha1
		if len(sample)==64:
			return hashlib.sha256
		return None
	def get_hash_algo_name(self,algo):
		return algo.__name__.rsplit("_",1)[1]
	def get_refs(self):
		info_refs = self.fetch("/info/refs")
		try:
			info_refs=info_refs.decode()
		except:
			die("unable to decode "+self.url.rstrip("/")+"/info/refs")
		hash_algo = self.get_hash_algo(info_refs.split("\t")[0])
		refs = {}
		for line in info_refs.splitlines():
			hash, refname = line.split("\t",1)
			refs[refname]=hash
		head_ref = self.fetch("/HEAD")
		try:
			head_ref = head_ref.decode()
		except:
			die("unable to decode "+self.url.rstrip("/")+"/HEAD")
		refs["HEAD"]="@"+head_ref.split("ref: ")[1].rstrip() # sym ref to HEAD
		return refs
	def command_list(self,_=None): # if it says `list for-push`, we just ignore it
		"""Lists refs one per line."""
		refs = self.get_refs()
		for refname in refs:
			yield ' '.join((refs[refname],refname))
		yield ''

def main():
	handler = GitRemoteGemini()
	while (line:=sys.stdin.readline()):
		for out_line in handler.handle(line):
			print(out_line)

if __name__=="__main__": main()
